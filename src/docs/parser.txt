fn parse_input(&input: str) -> Vec<String> {
      let mut in_single_quote = false;
    let mut in_double_quote = false;
    let mut curr_arg = String::new();

    let mut chars = input.chars();

    loop {
        match chars.next() {
            Some(ch) => {
                if ch == SINGLE_QUOTE {
                    if in_single_quote {
                        args.push(curr_arg.clone());
                        curr_arg.clear();
                        in_single_quote = false
                    } else {
                        in_single_quote = true
                    }
                }
                if !curr_arg.is_empty() {
                    args.push(curr_arg.clone());
                    curr_arg.clear()
                }
                curr_arg.push(ch);
            }
            None => break,
        }
    }

    if !curr_arg.is_empty() {
        args.push(curr_arg);
    }

    println!("{:?}", args);
    println!(
        "{:?}",
        input
            .split_whitespace()
            .map(|s| s.to_string())
            .collect::<Vec<String>>()
    );
}
